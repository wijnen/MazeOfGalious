Shrine info is in rom at 5dda (in code; mapped as 9dda)
4 bytes per record. Contents are below.

First byte is room.
Second is shrine ID, used when entering
Third is Y coordinate, fourth is X coordinate (both are truncated to k*8)

04 09 68 88	Ares Gold Shield
0a 0a 28 48	Ares Helmet
05 06 28 e0	Hephaestus Harp
36 08 a8 d0	Asclepius See a fairy to restore your vitality
37 07 a8 48	Hephaestus Sea shell
41 05 28 48	Ares Silver Shield
48 01 68 70	Demeter Secret Code
57 03 88 28	Death
73 02 68 b0	Hephaestus Mine
8f 04 48 48	Ares Bronze Shield and Magnifying Glass
20 0b 48 70	Demeter Necklace
00

sorted by shrine ID:
48 01 68 70	*Demeter Secret Code
73 02 68 b0		Hephaestus Mine
57 03 88 28	*Death
8f 04 48 48		Ares Bronze Shield and Magnifying Glass
41 05 28 48		Ares Silver Shield
05 06 28 e0		Hephaestus Harp
37 07 a8 48		Hephaestus Sea shell
36 08 a8 d0	Asclepius See a fairy to restore your vitality
04 09 68 88		Ares Gold Shield
0a 0a 28 48		Ares Helmet
20 0b 48 70		Demeter Necklace
Shrines in worlds: (codes placed in e690)
0c: world 5		Demeter
0d: world 8		Demeter
0e: world 1	Demeter
0f: world 2	Demeter
10: world 3	Athena
11: world 4	Demeter
12: world 6	Athena
13: world 7	Demeter
14: world 9	Demeter

shrine owners are listed in a table from 954c (1-based; filled in above). Codes:
0 Death
1 Hephaestus
2 Asclepius
3 Demeter
4 Ares
5 Athena

A list of items offered in shops (list goes from 01 up to 1d) is at 9253 @123

Contents of god screens.
watchpoint on map buffer: 944e @123 fills screen with 6c (blue wall, even in worlds) why? it's not shown...
vpeek shows that the vram actually contains f0, normal wall. But that's not in the charset with these colors!
I must have missed an update to the color table.

Let's check what happens there anyway:
9446 @123 is called repeatedly: write a block of 16 times 0x6c to *hl
This is done for:
	ee05
	eec5
	eee5
	ef65

Step back: god screen code seems to starts at 93ae
Step back: no actually, 8f0a? No. 8f1e, called from 48fb. Still no conditional jump.
48eb is ret nz based on contents of e608. ramwatch it.
	-> It's the animation timer for entering. When 0, the timer expired.
4901 calls 57e1, which seems to set up the characters! Find new color table.
	set_some_patterns_5 -> kana characters
	mirror multiple ix=6390
		68 64 09 04	4*, 68->64	00001001 -> src 0, target 0
		64 64 39 04 00	4*, 64->64 (?)	00111001 -> src 0, target 012
		iow: copy 68 to 64.
	chars setup ix=635e	07 8a 76 6a 9c 77 00
	send 1 character from 581d to 780 (*3 for screen regions) -> that's color table for f0!

Restart. Entering god room in world 1. Code triggers write to e690 (god in this room) at 8f06 @123
Function starts at 8eef @123
Skipped for castle.
Check 8f0a + (world-2): list of rooms where the god is in this world.
Table at 8f14+(world-2): god id.

Starting at 51a6 @123: draw god room.

3 steps:
	- god name	-> based on god id
	- god image	-> based on god id
	- god speech	-> based on shrine id

952e @123: write god name to buffer.
9535	A=*(954c+A) + 18	HL=955a @123	A=0e (shrine code from e690)

8f47	jump table for shrines

9302	Message id is *(9308 + (shrine id - 0e)) = 6
9505	Message id += 20 for English

9505	src = *b09e+2A; A=18 (demeter world 1)	@12f
951a	write god name src=b3c5 @12f (demeter)
951e @12f: done writing god name; next line.

god message:
	msg_id = *(9308 + shrine_id - 0xe)	# special handling for shrine_id == 8 (See a fairy; text in castle -> id=1)
	engels: +20


Message list:
	01-17?: japanese
	18-21: god names
	21-..: english


Initial (950c): hl = src, starting with 2B memory buffer address
	de = bc = buffer address; hl+=2
	write line until fe; return at ff
	bc+=20
	de = bc
	repeat.

During writing: hl = src, de = target buffer, bc = ?




World doors {{{

Marker: e688
Rooms: 9990-9998 (for doors 1-9)
Data: *(9997+2*targetworld)
}}}

Moais {{{

Code starts at call to 6df7 @def (from 5318)
de = ecbc
bc' = *e635: where did this get filled?

There are 32-byte records at e800 (= *ix) that are analyzed
Code analysis is below. (block 0)
Conclusion: e800 is list of enemies on screen, 20 bytes per enemy.
Find initialization.

at 5269, all memory from e600, size 0a40, is cleared. This includes list of enemies.
from 678d, memory at e800 is filled.

Starting at 6006 @456, enemies are copied from rom to ram
pointers to per world lists at b5cb+2*world (minimum of 1)
every room has a list of enemies (2B each), followed by a 0.
first byte is enemy type, called e here (value of 0e means bat) e6 and e7 are special, see code block 0 below.
byte 2:
	d = b7,b6,b5,b4,b3,0,0,0
	e = b2,b1,b0,e7,0,0,0,0
}}}

Boulders {{{

at 6342 @123, position is retrieved from f002
map for room 4 world 0 is at b8aa-b8ac. Bytes contain position.
765-+--- = Y
43210--- = X

Only in world 0!
Boulder map starts at b8a2 @789
}}}

disappearing ladders {{{
watchpoint for screen coordinate: drawn from 733c @1ef, based on *ec05(pos)+*ec03(height)
watchpoint for those: written in a78a @789, copied from a730
Table at a6eb: 16* 2 bytes, which are world+room where the ladder is.
	when found where A comes from (index into table), check a767 for what it does.
e0c0 stores something: if it's 1, ladder is not drawn? If 0, it's checked
	-> probably whether you've disappeared it
from a746, hl starts at e0b0 and loops through something, 15 (16?) steps.
for each, if *hl == 1, *hl = 0 (activation?)
-> Found: list at a6eb contains all 13 disappearing ladders.
set *ec00 to 10-index
info at a700 @789:
	Y, X, Height, ?: 	4 bytes copied to ec01
	1 byte stored in ec0f

	00 stored in ec07
	hl = first 2 bytes (from ec01)
	-> used to compute X(H), Y(L) on screen coordinate

Summary:
	everything happens in @789
	table at a6eb contains world+room words with ladders -> get index from this table (note: 1-based)
	use index on table at a700: record size 5
	table contains Y, X, height, ?, ? of ladder (note: Y is screen pixels, so offset by 20)
}}}

##### trap walls {{{

X coordinate: eaa3
a896 @789 rom source of wall location in this screen
a7bc @789 seems to be start of table
code is in 9d0f @789
a7bc: world pointers; castle: a7d4
-> 0-terminated variable length fields.
This room (84: 05 74 -> dropping enemies + trap wall?)

c=05
a=74

d = 60: upper 3 bits
e = A0: lower 5 bits << 3 -> == X coordinate

Summary of this session:
- There is a table with trap walls and some other things.
- One table per world, pointers to each world table are in a7bc + 2 * world (1-based)
- Each world table is a list of variable sized zero terminated records, one per room
- Records can contain any number of 2-byte fields.
- The first byte of each field is a code which indexes into a jump table. There are 7 options (starting at 1). Only the lower nybble is used. Upper nybble may contain data.
- Code 5 is a trap wall.
- For trap walls, the second byte is the coordinate of the top character: upper 3 bit is Y (in steps of 4 characters; options on screen: (20, 40, 60, 80, a0). Lower 5 bits are X in steps of 1 character.
- Other codes will need to be checked.
- Code 1 may be an elevator? This is not certain.

Next step: draw trap walls.
After that: place output on map for other things, assuming that second byte is also a coordinate with same encoding.

Type reference:
1: key door in castle
2: key door in world
3: one way push door (red) +10 == ->; +0 == <-
4: push door in world (blue)
5: trap wall
6: water stones (no coordinate) (only world 5 room 0b)
7: destructible wall

More details about type 6:
- On room enter: eab0[] is filled:
eab0	01	traptype 6 is active in this room 
eab1	00	number of appeared blocks
eab2	00	direction (0 == ltr; 1 == rtl)
eab3	012c	timer to go to next stage; resets to 0080
eab5	00	next item in table at a630 -> aeb8
eab6	00	flag? bit 0 tested.
eab7	0078	position of next tile (Y, X)
eab9	0000	screen address of tile to draw
012c is timer that counts down when standing at the edge.

Next, a541 @789 is called for counting down.
a59a is reached when timer expires.
*e505 is tested against *eab7: screen position x?
*e507 is tested against *eab8 (+/- 10): screen position y?
*aeb7+*aeb8 are copied to eabb

Next tile position (y,x) is stored in *eab7



# }}}

Killall {{{
=======

Candle room (4b)
6c63 @1ef copies the candle (76) to screen at location *e744
alleen als *e740 tussen 7 en 0x2d ligt? dat zijn allowed items...?
	e740: current room item
	76: "the" item (different pattern based on room)
--> dead end... seems to be in a forced screen redraw.
When e622 drops to 0, 1 is written in e61c. Seems to be a marker value.
read watchpoint triggers in a016 @123
9f87 @123: load world+room
not castle: ret
room 30: 9fa7 -> pij
room 4b: 9fb4 -> candle
room 28: 9fc1 -> vase
room 18: a003 -> sabre
room 2b: a01a -> dagger

}}}

Elevators {{{
=========

7680 @1ef: fill sprite name in memory attribute table
ec17 is x
767c: hl = ec10; *hl == 0: no elevator
	*(hl+5)-1 = Y
	*(hl+7) = X
	*HL' = Y, X + 10 -> second elevator block.

So ec10 is filled when the elevator appears
-> it's copied from e4c0

There is a table of all 6 multi-room elevators in e4a0, 10 bytes each.
Byte 1 is room number:
	58 52 1c 10 18 16. This probably changes when the elevator moves.
It does, at 648f @129
(vertical) elevator handling starts at 643c @129
ix=e4a0, b'=6, de'=10
For each elevator:
	exx; call 647a; exx
	ix += de
	djnz
	in castle:
		check 6 rooms from e4a1, step 10 (elevator rooms)
		if equal: jr 6470
		if none equal: no elevator (*ec10=0; *ec15=e0)
	6470: handle elevator in current room (copy all 10 bytes to ec10); not relevant for map.

	647a: handle elevator position.

call 64ee:
	XY += dXdY
	check limits and update dXdY and flags.updown
flags.2 = 0
if up:
	return if Y > 0x28 or (ix[0] == *e52d and *e52c != 1)	bible?
	else:
		ix[3] -= 1
		c = 0xb9
if down:
	return if Y < 0xc0
	else:
		ix[3] += 1
		c = 0x28
	# change room. 649b @129
	pointer table at ba80 @129	******************** !!!
	get pointer from table at index ix[0] - 1
	Add ix[3] (room index)
	store new room in ix[1]
	store c (Y) in ix[5].
	flags &= ~78
	if this elevator didn't just enter current room, return.

initial fill: 63ca @129
ix = e4a0; record length 10 (see below)

hl' = bb54; record length 1: starting rooms.
A = *HL'++
B = 0
E = counter
C = 80
A' = counter (6 .. 1)
B' = 6 counting down.

hl = bb24; record length 8 (see below)
0 38	initial Y
1 70	initial X
2 00	dX
3 02	dY
4 11	upper limit room
5 38	upper limit value
6 38	lower limit room
7 78	lower limit value


Elevator struct: (6 times 10 bytes each, first at e4a0)
0 E	elevator id
1 A	current room
2 C=80	flags: bit 1: down(0) or up(1) bit 2: ?
3 B=00	current room index
4 0	
5 *HL++	current position Y
6 0
7 *HL++ current position X
8 *HL++	dX per frame (all 0)
9 *HL++	dY per frame (all 2)
a -
b -
c *HL++	top limit room
d *HL++	top limit position
e *HL++	bottom limit room
f *HL++	bottom limit position
}}}

####### Code block 0 {{{
if not(ix[2] & 0x80): return
if ix[9] & 0x80:
	#6eb3
	if *e630: ret
	ix[9] := n7...n0
	l = n7:0
	b = 0*2,n5:0
	c = 0*5,n2:0
	c' -= n2:0
	if n6:
		#6f2c
		jump to table that follows in code based on ix[0b]:
			6f54, 6f8a, 6fe2, 6fb5, 6fd6, 6fd2, 6fda, 6f73,
			7079, 707f, 70c6, 7131, 70c6, 6fce, 6fde, 717a, 717b
			# special handling for special cases?
		ret
	if c not in (1,2): ret
	if c == 2:
		a = 0*5,n5:3
		switch:
			a == 0: hl = 0000
			a == 1: hl = 0010
			a == 2: hl = 00f0
			a == 3: hl = 1000
			a == 4: hl = f000
			a == 5: hl = ff10
			a == 6: hl = fff0
			a == 7: ret
		#6eff
		de[0] = ix[05] + h - 1
		de[1] = ix[07] + l
		de[2] = ix[12]		# note: hex
		de[3] = ix[13]
		de += 4
	#6f16
	de[0] = ix[05] - 1	enemies?
	de[1] = ix[07]
	de[2] = ix[0a]
	de[3] = ix[0b]
	de += 4
	ret
else:
	#6e36
	if *e630 == 0:
		if ix[0] - 5d > 2: ret
	else:
		if ix[0] - 5d <= 2: ret
	# 6e4e
	if ix[9].6:
		# 6ea1
		Do 6f2c special handling.
	else:
		# 6e54
		if ix[0] not in (5c, 6b):
			# 6e79	copy given block of characters (height B, width C) to screen buffer.
			bc = *(9d90+2*ix[0a])
			hl = *(9e0a+2*ix[0a])
			de = ix[12:13]
			ldir met b=0 en restore bc
			de += 20 - c	# next line
			repeat b times
		character = ba if ix[0] == 5c (== spiral ball: should look like boulder) else 7a
		# Write 2x2 item to screen buffer.
		*(ix[12:13]) = character
		*(ix[12:13] + 1) = character + 1
		*(ix[12:13] + 20) = character + 2
		*(ix[12:13] + 21) = character + 3
		ret
# }}}
vim: set foldmethod=marker :
