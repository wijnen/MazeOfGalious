Full memory map of MoG.

c000
d000
e000
	e000	state
	e001	substate
	e002	seen at T4E24h, sound related
		bit 0
		bit 1
		bit 2
		bit 3
		bit 4
		bit 5
		bit 6: Related to sound IDs with 0x80 bit set
		bit 7
	e003	seen at 0xB86D
	e006:	Lock for preventing simultaneous stuff, in interrupt hook.
	e009:
		&0x01 (bit 0): Pressed key up
		&0x02 (bit 1): Pressed key down
		&0x04 (bit 2): Pressed key left
		&0x08 (bit 3): Pressed key right
		&0x10 (bit 4): Pressed space
		&0x20 (bit 5): Pressed M
		
		CTRL, L, F1, F2 aren't in here. Seems purely related to controlling 
		Popolon/Aphrodite.
		
		Some combinations of keys are off:
		1	2	4	8
		UP	DOWN	LEFT	RIGHT	Expected	Actual	Remark
		No	Yes	Yes	Yes	0x0E		0x0C	No down key registered
		
		
		(Some) code references:
		0xa392 (page 1+2+3)
		0x4c6b (page 1+2+3)
		0x4C75: "read_controls": keyboard and joystick are read
		0x4C68: "store_controls": write state of controls to 0xE009
	e00d:
		bit 0: Sound related. set: muted?paused?Don't play sounds? T4E2Dh
		bit 1:
		bit 2:
		bit 3:
		bit 4:
		bit 5:
		bit 6:
		bit 7:
	e00e:	Involved in building Konami logo line by line
	e00f:	Involved in building Konami logo line by line
	e01d:	Seen at 0x5C9E
	e01e:	Seen at 0x5CA8: current sound id?
	e021:	Seen at 0x5CB0
	e041-e042: current world (1=castle) and current room
	e052:	Maximum vitality possible for Aphrodite. Multiple of 8.
	e056:	Maximum vitality possible for Popolon. Multiple of 8.
	e058:
		When F1 is pressed:
			0: Aphrodite is dead and not choosable
			1: Aphrodite is alive and choosable
		During gameplay:
			0: ?
			1: ?Aphrodite is still alive?
	e059:
		When F1 is pressed:
			0: Popolon is dead and not choosable
			1: Popolon is alive and choosable
		During gameplay:-
			0: ?
			1: ?Popolon is still alive?
	e063-e06c: World bits/items
		bit 0 / 0x01: world is open
		bit 1 / 0x02: great key
		bit 2 / 0x04: Beaten boss
		bit 3 / 0x08: ?unused?
		bit 4 / 0x10: map
		bit 5 / 0x20: holy water
		bit 6 / 0x40: cape
		bit 7 / 0x80: magical rod
		
		e063: World 1
		e064: World 2
		e065: World 3
		e066: World 4
		e067: World 5
		e068: World 6
		e069: World 7
		e06a: World 8
		e06b: World 9
		e06c: World 10

	e06f:
		Seen at T5D92h (page 0). Fake. Would have been 0xe070 if 
		Konami used 0 based instead of 1 based.
	e070-e099: item inventory (see items.txt for individual item addresses)
	e097: active shield (0 means no shield; 3 means gold)
	e0b0-e0c7:
		byte 0:
			0: Timer expired?
			1: Timer expired and in correct room/draw ladder upon re-entering room?
			2: Timer not yet expired?
		byte 1: Timer for reappearing disappeared ladder. Counts down to 0x00, possible statically from 0x3C (=60, intended as 60 seconds?). Steps down every 0x20 (test: and 0x1F) beats of counter 0xE604. Takes about 75 seconds to countdown 40 ticks.
		
		e0b0-e0b1: (ID 01) room 0x0d
		e0b2-e0b3: (ID 02) room 0x13
		e0b4-e0b5: (ID 03) room 0x15
		e0b6-e0b7: (ID 04) room 0x3c
		e0b8-e0b9: (ID 05) room 0x46
		e0ba-e0bb: (ID 06) room 0x49
		e0bc-e0bd: (ID 07) room 0x56
		e0be-e0bf: (ID 08) room 0x66
		e0c0-e0c1: (ID 09) room 0x6a
		e0c2-e0c3: (ID 0A) room 0x74
		e0c4-e0c5: (ID 0B) room 0x7c
		e0c6-e0c7: (ID 0C) room 0x85
	e0d4: seen at 0x4BC6
		?world key is visible?
	e100-e107:
		Sound execution/code refs
				Castle	GrtKey	Lad2Wld	World1
		e100-e101:	0x610B	0x610B	0x610B	0x610B
		e102-e103:	0x6112	0x6112	0x6112	0x6112
		e104-e105:	0x6119	0x6098	0x6098	0x6119
		
		e106-e107 (shadow channel A?):
			seen at 0x4F4E
				vase:		"A5 64" (0x64A5)
				landing:	"A5 64" (0x64A5)
		e108-e109 (shadow channel B?):
			seen at 0x60A0
		e10a-e10b (shadow channel C?):
			seen at 0x6099
	e10c/e127/e142/e15d/e178:
		0xE10C - 0xE126: Channel A
		0xE127 - 0xE141: Channel B
		0xE142 - 0xE15C: Channel C
		0xE15D - 0xE177: Channel ??? (seen at 0x64A5)
		0xE178 - 0xE192: Channel ??? (seen at 0x649E)
		
		+00,+01 e10c,e10d / 0xe127,0xe128 / 0xe142,0xe143:
			Pointer to "opcode" (usually tone or octave setting).
			0x7F40: Start of Channel A for pressed space to begin game.
			0x805C: Start of Channel B for main castle tune.
			0x81EB: End   of Channel B for main castle tune.
			
			?Governed by 0x61A2 (page D)?
			?Governed by 0x6191 (page D) for pressed space tune?
			
			*pointer >= 0xd0: special (see 0x619A)
			*pointer >= 0xc0: special (see 0x61A7)
			?Else *pointer is duration of note? (without duration factor and *e1c5)
		+02 e10e: bits
			0:
				0x6136: Tested
				0x61E0: Tested
			1:
				0x61E0: Set
			2:
				0x612C: Set
				0x6159: Tested
			3
			4
			5:
				0x616F: Tested
				0x61DC: Cleared
			6: Increment frequency divider by 1?
				0x6247: Tested
					If set: Increment frequency divider by 1 (inc DE).
				0x6402: Set
			7: 1: End of sound definition (0xFF seen)
				0x6174: Tested
				0x7188: Set
				0x62A8: Cleared (page 13)
		+03, e10f:
			?Duration factor?
			0x06: Seen in main castle theme
		+04 e110:
			Seen at 0x6382 (page 0xD)
		+05 e111:
			Seen at 0x61B1, 0x638D
		+06 e112:
			Seen at 0x6394
		+07 e113: Octave
		+08 e114: Sound opcode?
			0x01: Special, see 0x627F, HL -> 0x65A7
			0x02: Special, see 0x6283, HL -> 0x65BF
			0x03: Special, see 0x6287, HL -> 0x65D7
			0x04: Special, see 0x628B, HL -> 0x65EF
			0x05: Special, see 0x628F, HL -> 0x6607
			Otherwise:                 HL -> 0x661F
		+09 e115:
			Number of VDP ticks left for the current note.
			Counts down to zero.
			0x61CA: Set
		+0a e116:
			Volume (0x00-0x0F)
			Value 0x10 (bit 4) is a special case in the PSG:
			0: Nothing special, just the volume as expected.
			1: The volume will vary in proportion to the 
			   envelope shape defined by PSG register 13.
			
			bit 4: Seen at 0x6578 (page 13)
			bit 4: Seen at 0x64EF (page 13)
		+0b e117:
			Seen at 0x6147
		+0c,0d e118,e119 / e133,134 / e14e,e14f / e167,e168 / e184,e185:
			pointer into sample.
			Main castle theme channel A: 0x7204
			Main castle theme channel B:
				0x7271 (mainly)
				0x6663
				0x6667
				0x6669
				0x666B
				0x666D
				0x666F
				0x6671
				0x6673
				0x6675
				0x6677
				0x6679
				0x667B
				0x667D
				0x667F
				0x6681
				0x6683
				0x6685
				0x6687
				0x6689
				0x668B
				0x668D
				0x668F
				0x6691
			Main castle theme channel C:
				0x6EE5
				0x6637
				0x663C (noise?)
				0x663D
				0x6642
				0x6647 (noise?)
				
		+0e e11a: 0x01 all the time?
		+0f e11b: 0x01 all the time?
		+10 e11c:
			Seen at 0x6361
		+11 e11d: Seen at 0x6530,0x6547
		+12,13 e11e,e11f:
			Seen at 0x6421,0x6422
		+14 e120: MSB of frequency divider value (4 bit) "note"
		+15 e121: LSB of frequency divider value (8 bit) "note"
		+16 e122: Seen at 0x613D,0x640B
			0: decrease frequency?
		+17 e123: Seen at 0x6410,0x645D
			low nybble: increase frequency divisor, decrease frequency
		+18 e124: Seen at 0x6467
		+19 e125: Seen at 0x647A
		+1a e126: play sound if 0?
	e15d-e177: seen at 0x4F39
	e169-e170: seen at 0x4F47
		vase: "7D 7C" (0x7C7D) - pointer to sound definition?
	e1ae: PSG channel selector/picker/chooser.
		0x00:	Operate on channel A (PSG register 0+1, frequency divider registers for channel A)
		0x01:	Operate on channel B (PSG register 2+3, frequency divider registers for channel B)
		0x02:	Operate on channel C (PSG register 4+5, frequency divider registers for channel C)
	e1af: Sound related
		Possibly indicates which channel is handled currently.
		0x00:	During pauze
		0x01:	Seen at 0x6070 (page D), not observed with ram_watch (?too short?)
		0x02:	Twitchy during ram_watch
		0x03:	Most of the time
		0x04:	Noise?
		
		Seen at 0x6434 where it is a loop counter for rotating 0x7f
			0: 0x7F => 0xFE (1111 1110) ?PSG reg7, i.e. enable channel A?
			1: 0x7F => 0xFD (1111 1101) ?PSG reg7, i.e. enable channel B?
			2: 0x7F => 0xFB (1111 1011) ?PSG reg7, i.e. enable channel C?
                        
			3: 0x7F => 0xF7 (1111 0111)
			4: 0x7F => 0xEF (1110 1111)
			5: 0x7F => 0xDF (1101 1111)
			6: 0x7F => 0xBF (1011 1111)
			7: 0x7F => 0x7F (0111 1111)
	e1b0: seen at 0x4F18,0x607E,0x6125, related to 0xe1af
	e1b1: Input for PSG register 7 (selecting tone or noise).
              Used in interrupt hook as first action.
                        ,---------- PSG I/O port B, must be 1
                        |,--------- PSG I/O port A, must be 0
                        || ,------- 1 == disable noise for channel C
                        || |,------ 1 == disable noise for channel B
                        || ||,----- 1 == disable noise for channel A
                        || ||| ,--- 1 == disable tone  for channel C
                        || ||| |,-- 1 == disable tone  for channel B
                        || ||| ||,- 1 == disable tone  for channel A
		0xB8 == 10 111 000: noise xxx, tone ABC - during main theme
		0xBC == 10 111 100: noise xxx, tone ABx - T4DEFh (inside some sort of init routine)
		0xBE == 10 111 110: noise xxx, tone Axx - during pauze
		0x9C == 10 011 100: noise xxC, tone ABx - during main theme
	e1b2: seen at 0x600D
		bit 0: ?use shadow channel at 0xe10a, shadow channel C?
			Set at 0x4F8F
			Cleared at 0x501B
			Tested at 0x6010
		bit 1: ?use shadow channel at 0xe108, shadow channel B?
			Set at 0x5067
			Tested at 0x50b3
			Tested at 0x6015 (page d)
			Cleared at 0x4ee2 (page 0)
			Cleared at 0x50bc
			
			0x50b9: specific code for if bit is set.
	e1b7: Value for PSG register   0 (channel A, frequency divider, LSB)
	e1b8: Value for PSG register   1 (channel A, frequency divider, MSB)
	e1b9: Value for PSG register   8 (channel A, volume)
	e1ba: Value for PSG register   9 (channel B, volume)
	e1bb: Value for PSG register 0xa (channel C, volume)
	e1c0: seen at 0x6049, 0x601A
	e1c1: seen at 0x6028, 0x6506
	e1c2: seen at 0x643F
		Wanted value for PSG reg 7? Enable noise/tone, inverse logic.
	e1c3: seen at 0x4F13 (page 0), 0x63F5, 0x63FC (page 13)
	e1c4: seen at 0x6040
	e1c5:
		seen at 0xBCBD (page 0x3, stored/computed)
		seen at 0x61B1 (page 13)
	e1c6: seen at 0x615E
	e1c7: ?last/previous/current sound?
		0x00: quiet?
		0x81: after entering "YOMAR" in world 1 in boss room (flickering screen).
		0x82: at entering world 1 (going up the ladder in the castle)
		0x82:
			at leaving world 1 (going down the ladder in the castle)
			Entering a shrine
			Leaving a shrine
		0x83:
			special: explicit compare at 0x4e7b
			when fairy appears
		0x84: boss is defeated?
		0x85: at pickup of great key in castle
		0x86: at start of story
		0x87: after space pressed when game says "push space key"
		0x88: in castle (also during demo, also after leaving a world)
		0x89: touched fairy
		0x8A: in world 1
		0x8B: victory sound?
		0x8C: ominous sound
		0x8D: Inside shrine
		0x8E: at start of screen: "World 1 !!"
		0x8F: at entering boss room in world 1
		0x90: when YOMAR is about to appear (gas clouds)
		0x91: ctrl pressed? bible?
		0x92: ?
		0x93: ?
		0x94: When Popolon/Aphrodite dies
		0x95: Game over
	e1c9: seen at 0x6164
	e4a0-e4ff: vertical elevator info; 06 records:
		0 elevator id
		1 current room
		2 flags: bit 1: down(0) or up(1) bit 2: ?
		3 current room index
		4 0
		5 current position Y
		6 0
		7 current position X
		8 dX per frame (all 0)
		9 dY per frame (all 2)
		a -
		b -
		c top limit room
		d top limit position
		e bottom limit room
		f bottom limit position
	e500:
		0: Player is not jumping
		1: Player is jumping
	e501:
		0: Playing as/with Aphrodite
		1: Playing as/with Popolon
	e502:
		Direct redrawing when poking. Sprite index?
		
		It seemed bits at first, but when combining bits to, 
		say, 0x0a (8+2), we see Popolon dying. So probably not 
		bits after all.
		
		0x00: Player has feet together,             facing right
		0x01: Player has feet apart (walking),      facing right
		0x02: Player has feet together,             facing left
		0x03: Player has feet apart (walking),      facing left
		0x04: Player has feet off ground (jumping), facing right
		0x05: Player has feet off ground (jumping), facing left
		0x06: Player has feet off ground (jumping), facing right, swinging sword
		0x07: Player has feet off ground (jumping), facing left,  swinging sword
		0x08: Player has feet apart,                facing right, swinging sword
		0x09: Player has feet apart,                facing left,  swinging sword
		0x0A: Player is hit,                        facing right
		0x0B: Player is dying,                      facing right
		0x0C: Player is hit,                        facing left
		0x0D: Player is dying,                      facing left
		0x0E: Player is facing wall (climbing up),  left  foot down
		0x0F: Player is facing wall (climbing up),  right foot down
		0x10: Player is facing you (climbing down), right foot down
		0x11: Player is facing you (climbing down), left foot down
		0x12: Player is hit, no face,               "facing" right
		0x13: Player is dying, no face,             "facing" right
		0x14: ?Just some pixels?
		0x15: ?Just some pixels?
		0x16: ?Fireball going to right, trail type 1?
		0x17: ?Fireball going to right, trail type 2?
		0x18: Apparently same as 0x11
		0x19: Apparently same as 0x10
	e503:
		0x00: Player is facing right
		0x01: Player is facing left
		0x02: Player is climbing a ladder
	e504:
		0x00: No boots?
		0x40: Traversing ladder with boots?
		0x80: Traversing ladder with boots?
		0xC0: Traversing ladder with boots?
	e505: Y. Height (of player's feet), measured in pixels
		0x00: Top of screen, body and legs aren't visible.
		0x20: On top of highest brick wall.
		0x27: Climbing ladder up, changing to above room, lower half still on stairs/ladder.
		0xB8: On lowest brick wall.
		0xC2: Falling to the room below.
	e507: X. X position of player.
		0x0E:	Player leaves to the room to the left.
		0x10:	Player just entered from the room to the left.
		0xF7:	Player just entered from the room to the right.
		0xF9:	Player leaves to the room to the right.
	e508: Has something to do with traversing ladders.
	e509: Has something to do with jumping.
		0x00:	?Jump started? @0x29A?
		0x01:	?Inc @0xa412 (pages 1+2+3)?
		0x02:	?Inc @0xa412 (pages 1+2+3)? Feet already in the air, legs apart
		0x03:	?Inc @0xa412 (pages 1+2+3)? Jumped the size of a wall (1 character)
		0x04:	?Inc @0xa412 (pages 1+2+3)? Jumped the size of 2 characters
		0x05:	?Inc @0xa412 (pages 1+2+3)? Jumped the size of 2.5 characters
		0x06:	?Inc @0xa412 (pages 1+2+3)? Jumped the size of 3.0 characters
		0x07:	?Inc @0xa412 (pages 1+2+3)? Jumped the size of 4.0 characters
		0x08:	?Inc @0xa412 (pages 1+2+3)? Jumped the size of 4.5 characters
		0x09:	?Inc @0xa412 (pages 1+2+3)? Jumped the size of 5.0 characters
		0x0A:	?Inc @0xa412 (pages 1+2+3)? Jumped the size of 5.0 characters
		0x0B:	?Inc @0xa412 (pages 1+2+3)? Jumped the size of 5.5 characters
		0x0C:	?Inc @0xa412 (pages 1+2+3)? Jumped the size of 5.5 characters
		0x0D:	?Inc @0xa412 (pages 1+2+3)? Jumped the size of 6.0 characters
		...
		0x18:   ?Jump ended for Aphrodite?
		0x0B:	?Jump ended for Popolon (lowest jump possible)?
		0x18:   ?Jump ended for Aphrodite?
		0x1A:	?Jump ended for Popolon (highest jump possible)?
	e50a: Quite similar to e509, slightly different in values.
	e50b: Starts counting when on a ladder.
	e50c:
		00: Not on ladder? Don't increment counter e50b?
		01: On ladder, climbing up
		02: On ladder, climbing down
	e516: Has something to do with disappearing ladder on which side the player is facing.
	e525: Has something to do with disappearing ladder. Used the ladder?
	e52e:
		00: No arrow pressed?
		01: Up arrow pressed? Seems extra special because of jumping?
		02: Down arrow pressed?
		04: Left arrow pressed?
		08: Right arrow pressed?
		
		(Some) code references:
		0xA8F0 (pages 1+2+3)
	e532:
		(Some) code references:
		0xA8F7 (pages 1+2+3)
	e533:
		(Some) code references:
		0xA8F2 (pages 1+2+3)
	e536:
		Multiple uses:
			DaggerState (for room 0x2B)
			SabreState (for room 0x18)
			VaseState (for room 0x28)
		
		Meaning as DaggerState:
		0: initial
		1: Pressed right
		2: Pressed down
		3: Pressed left
		4: Pressed up, appears
		
		Meaning as SabreState:
		0: initial
		1: Sabre appears (after killing all bats, and beaten world 6 boss)
		
		Meaning as VaseState:
		0: initial
		1: Faced right and flung sword 1 time
		2: Faced right and flung sword 2 times
		3: Faced right and flung sword 3 times
		4: Faced left and flung sword 1 time
		5: Faced left and flung sword 2 times
		6: Faced left and flung sword 3 times
		7: Jumped 1 time
		8: Jumped 2 times
		9: Jumped 3 times (vase appears)
	e537:
		0: not jumping
		1: jumping
		Seems to be 1 shorter than 0xe1b0 and far shorter than 0xe500
		vase related? Seen at 0x9FFB (pages 1+2+3)
	e538:
		0: Sword not flinging
		1: Sword flinging (changes back to 0 even if space is still pressed)
	e539:
		0: Vase is not visible (room 0x28)
		1: Vase should become visible (room 0x28). Set to 1 at 0xA04B, after seeing VaseState==9.
	e604: Counter. Starts counting from 0x00 upwards, upon entering a room.
	e608: seen at 0xB869
	e60c-e60d: address of some info about current room; 1 bit each.
	e610: is this room in the special list? (all killall rooms seem to be, plus some more.)
	e611: flag: 1 = all enemies need to be killed. 0 = no killall specials.
	e612: some room property set up during room enter (to 0 if room not in list from 60ee, 1 if it is on the list).
	e613: enemy counter during room setup, to index bits (for show/hide) in *e60c.
	e614: some room property based on table (2 bits per room) at ba2e. Can be 0, 1 or 2.
	e61c: ?Sabre visible/appeared in sabre room?
	e61e: ?Touched fairy?
	e620: number of enemies in this room
	e621: used during enemy setup
	e622: number of enemies to kill before special happens, or 0.
	e623: 
	e624: some enemy property set during setup (again for each enemy?)
	e625: set to 80 if *e097 > 0 and correct enemy type is in room, otherwise set to 0 correct type taken from lists, see code at 659b @456
	e635: maximum allowed number of enemies in this room
	e636: something about enemies.
	e648-e64b: exits from this room: down, up. left, right
	e650-e670: appearing enemies
		e650: falling+bouncing grey boulders appear in this room. Code at 61e4@4: hardcoded to castle rooms 03, 47, 71, 72.
		e653: exploding fireballs appear in this room. Code at 6205@4: hardcoded to castle rooms 90,91,92,93; world 8 rooms 0f, 10, 11, 12, 13; world 9 rooms 03, 04, 05; world 10 rooms 02, 03.
		e659: jumping fish appear in this room. Code at 6239@4: hardcoded to castle rooms 89, 8a, 8b, 8c.
		e65c: crawlers appear in this room. Code at 6249@4: hardcoded to castle rooms 0a, 11, 1c, 38, 49, 7a, 83, 84, 50; world 4 rooms 0a, 0c; world 6 room 08.
		e65f: seahorse demons appear in this room. Code at 6291@4: hardcoded to world 5 rooms 07, 08, 09, 0a.
		e662: vertical blobs appear in this room. Code at 62a4@4: hardcoded to castle rooms 66, 5e, 5f.
		e665: falling (non bouncing) grey boulders appear in this room: hardcoded to castle rooms 2f, 3b; world 8 rooms 02, 0e.
		e668+e669+e66a: flocking birds. code at 61a8@4: hardcoded to world 6 rooms 02(5), 03(a), 04(5), 07(a), 08(a), 11(a), 12(5)
			e668: 1 if flocking birds appear in this room.
			e669: number of birds (5 or a)
			e66a: ? (initialized to 0010)
	e680: god id of shrine in this room
	e688: marker(?) for world door
	e68c: world door state (closed; opening; open)
	e68d-e68e: related to opening world door (T9A1Dh)
	e690: god id of shrine you're standing in
	e691: shopping substate?
	e692: position of selector in shop
	e693: T90BCh (page 1/2/3)
	e694: T90B2h (page 1/2/3)
	e700: Index for table at 0x7F97 (page 1/2/3), 1 based. (So 0x7F98 is we make it 0 based.)
	e710: Sound related. Related to e700.
	e71d: Sound related.
	e740: item id that is in current room

	e742-e743: Y and X position of item, not a screenbuffer location 
		like e744-e745. Example for vase:
			Y=0x88 (@0xe742)
			X=0x80 (@0xe743)
		
		(Some) code references:
		0x5DBD (page 0)
		0x5DBF (page 0)
	e744-e745:
		Appear location for world 10 door.
		
		Appear location of vase (and probably for all items), in 
		screenbuffer. Top left. For example vase: 0xEF30
	e800-?e99f?: enemy info; 20 byte each
		00	enemy type
		01	initial 0
			Fairy Dust:
				0x01	Fairy Dust is floating
				0x03	Fairy Dust is floating
				0x04	Fairy Dust was converted to Fairy. ?T824Dh?
		02	Flags. Bit 7: active. Initial f0 (normal) or f8 (killall)
		03	enemy number, if bits in *e60c are used for this enemy (room?).
		04	initial 00
		05	Y
		06	initial 00
		07	X
		08	initial 00
		09	bit 7: set for sprite, clear for characters. bit 6: set for boss? initial from edata[0]
		0a	sprite name (for sprite) or boss pattern for character enemies. initial from edata[1]
		0b	sprite color; initial from edata[2] edata is 67b6 + 5 * *e635 ?! (should be etype...)
		0c	?	from f012
		0d	?	from f013
		0e	?	from f014
		0f	?	from f015
		10	hitpoints left	initial from from edata[3] (bat: 01); ff is special
		11	?	initial from from edata[4] (bat: 69)
		12+13	for character enemies: screen address (in ed00) for first character
		14	initial 00
		15	initial 00
		16	initial 00
		17	initial 00
		18	initial 00
		19	initial 00
		1a	initial 00
		1b	initial 00
		1c	initial 00
		1d	initial 00
		1e	initial 00
		1f	initial 00
	eaa2: Y coordinate of trap wall
	eaa3: X coordinate of trap wall
	eac0: has something to do with disappearing wall in World 1, room 0x0c
	eac2: has something to do with disappearing wall in World 1, room 0x0c
	ec00-ec07: disappearing ladder
								room 0d	room 13	room 15	room 3c	room 46	room 49	room 56	room 66	room 6a room 74	room 7c	room 85	room 88
		ec00: non zero if disappearing ladder		01	02	03	04	05	06	07	08	09	0A	0B	0C	0D
		ec01: Y						40	80	60	40	80	40	80	60	60	60	40	80	60
		ec02: X						B0	A0	80	50	30	30	60	E0	70	20	A0	B0	30
		ec03: height (counted from top)			07	07	03	07	07	0F	07	07	07	07	0B	07	0B
		ec04: ?						40	40	20	40	40	80	40	40	40	40	60	40	60
		ec05: X of something				16	14	90	0A	06	06	0C	9C	8E	84	14	16	86
		ec06:						EE	EF	EE	EE	EF	EE	EF	EE	EE	EE	EE	EF	EE
			0000 0001
			0000 0010
			0000 0100
			0000 1000
				0: Draw ladder downwards?
				1: Draw ladder upwards?
			0001 0000
			0010 0000
			0100 0000
			1000 0000:
		ec07: 00: hasn't disappeared, 01: disappeared	00	00	00	00	00	00	00	00	00	00	00	00	00
	ec20-ec30: horizontal elevator info
		00: enabled
		01: room number (always the current room)
		02: 0
		03: elevator id
		04: 0
		05: current Y (does not change)
		06: 0
		07: current X; initial is minimum
		08: Y step per frame (always 0)
		09: X step per frame (02 or fe)
		0a: -
		0b: -
		0c: 0
		0d: minimum X
		0e: 0
		0f: maximum X
	ec80-ecff: sprite attribute buffer.
		eca0: seen at 0xB873
	ed00-efff: screen buffer.
f000
	f0f1: wanted page number from 0x6000
	f0f2: wanted page number from 0x8000
	f02c: seen at B88A
	f032: seen at B885
