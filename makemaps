#!/usr/bin/python
# vim: set fileencoding=utf-8 :

import sys
import struct
import numpy
import Image
import read_patterns

palette = ((0, 0, 0,
		0, 0, 0,
		62, 184, 73,
		116, 208, 125,
		89, 85, 224,
		128, 118, 241,
		185, 94, 81,
		101, 219, 239,
		219, 101, 89,
		255, 137, 125,
		204, 195, 94,
		222, 208, 135,
		58, 162, 65,
		183, 102, 181,
		204, 204, 204,
		255, 255, 255))

def get_pattern (room):
	d = ord (data[0x140d7 + (room + 1) / 2])
	if (room + 1) & 1:
		return d & 0xf
	else:
		return d >> 4

data = open ('/home/shevek/msx/rom/MazeOfGalious.rom').read ()
world = struct.unpack ('<' + 'H' * 11, data[0xeac0:0xead6])
world = [x - 0x6000 + 0xe000 for x in world]
rooms = [(world[x + 1] - world[x]) / 40 for x in range (len (world) - 1)] + [6]
patterns = [get_pattern (i) for i in range (rooms[0])]
tiles = numpy.array ([[[ord (data[0xe000 + t * 0x10 + y * 4 + x]) for x in range (4)] for y in range (4)] for t in range (0xac)], dtype = numpy.uint8)

#print '\n'.join (['world %d; address: %05x rooms: %d' % (n, x, rooms[n]) for n, x in enumerate (world)])

def makeimage (data, patterns):
	ret = numpy.zeros ((20 * 8, 32 * 8), dtype = numpy.uint8)
	for y in range (20):
		for x in range (32):
			ret[y * 8:(y + 1) * 8, x * 8:(x + 1) * 8] = read_patterns.get_char (patterns, data[y, x])
	im = Image.fromarray (ret, 'P')
	im.putpalette (palette)
	return im

out = []
for idx, (w, nrooms) in enumerate (zip (world, rooms)):
	fullmap = numpy.zeros ((nrooms, 20, 32), dtype = numpy.uint8)
	roomdata = numpy.array ([[ord (x) for x in data[w + 40 * room:w + 40 * (room + 1)]] for room in range (nrooms)], dtype = numpy.uint8).reshape ((nrooms, 5, 8))
	for y in range (5):
		for x in range (8):
			fullmap[:, y * 4:(y + 1) * 4, x * 4:(x + 1) * 4] = [tiles[roomdata[r, y, x]] for r in range (nrooms)]
	out.append ([makeimage (fullmap[r], patterns[r] if idx == 0 else -1) for r in range (nrooms)])

for w, im in enumerate (out):
	for n, r in enumerate (im):
		r.save ('/tmp/mog-%02d-%03d.png' % (w + 1, n + 1))
